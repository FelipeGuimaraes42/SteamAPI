# -*- coding: utf-8 -*-
"""Level_2_SteamDataCollection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IdGWXz8pj_rDz4m-rVseuJp_oaCp9gcf

# **Steam User Data Collection:**

## Libraries ; Imports and Dataframe Initialization:
"""

!pip install python-steam-api

import pandas as pd
import numpy as np
from steam import Steam

from steam import Steam

import warnings
warnings.filterwarnings("ignore")

steam = Steam('put_your_steam_api_key_here')

"""## Populate privateIdsList

This list has steamid's of users that we cannot get friends lists from.

Please update this file after you run the script, making sure only new ids are added:

*   https://docs.google.com/document/d/1JEWrZSZoGuhNglK-o_AmGA3Yto_dRAxQJovNPWL-Rqo/edit



"""

privateIdsList = ['76561198146781161',
 '76561198158654980',
 '76561198146436816',
 '76561198071642745',
 '76561198095543484',
 '76561198067515514',
 '76561198120929934',
 '76561198108624783',
 '76561198061647427',
 '76561198051877993',
 '76561198046322736',
 '76561198009711267',
 '76561198076586161',
 '76561198073711376',
 '76561198070973300',
 '76561198079095683',
 '76561198005483163',
 '76561197995553278',
 '76561198064825154',
 '76561198047023022',
 '76561198087201492',
 '76561198064080476',
 '76561198056554410',
 '76561198068222793',
 '76561198064367214',
 '76561197980049457',
 '76561198071558773',
 '76561198071856604',
 '76561198044102390',
 '76561198045767445',
 '76561198028392685',
 '76561198047623531',
 '76561198081752114',
 '76561198002169780',
 '76561198064206493',
 '76561198011356057',
 '76561198045892513',
 '76561198060118961',
 '76561198068520025',
 '76561198051389917',
 '76561198081628015',
 '76561198077172082',
 '76561198026996973',
 '76561198084898750',
 '76561198049418299',
 '76561198031435466',
 '76561198877895899',
 '76561198379270462',
 '76561198322694176',
 '76561198047638441',
 '76561198121909451',
 '76561198055105751',
 '76561198075869585',
 '76561198077707172',
 '76561198061553349',
 '76561198046099149',
 '76561198238179048',
 '76561198260128942',
 '76561198145698024',
 '76561198061466456',
 '76561199176343904',
 '76561198054233018',
 '76561198087499972',
 '76561198081729931',
 '76561198368267855',
 '76561198048476957',
 '76561198087854341',
 '76561198056954416',
 '76561198087757102',
 '76561198022439541',
 '76561198043549809',
 '76561197995996037',
 '76561198047852526',
 '76561198123065822',
 '76561198005314855',
 '76561198011906503',
 '76561198026874586',
 '76561198127025989',
 '76561198063924302',
 '76561198103736953',
 '76561198035435880',
 '76561198025150574',
 '76561198138805275',
 '76561198208922941',
 '76561198258486524',
 '76561198365531094',
 '76561198085903708',
 '76561198078580017',
 '76561198116002497',
 '76561198141200789',
 '76561198203479808',
 '76561198096313083',
 '76561198065098870',
 '76561197993589240',
 '76561198017388672',
 '76561198060234650',
 '76561198080376140',
 '76561198065092094',
 '76561198060462306',
 '76561198068250573',
 '76561198010612380',
 '76561198055089610',
 '76561198119469160',
 '76561198064701368',
 '76561198073309096',
 '76561198060091542',
 '76561198021070944',
 '76561197991785589',
 '76561198022285947',
 '76561198042155831',
 '76561198006675992',
 '76561198013396326',
 '76561198032819752',
 '76561197991584334',
 '76561198026485642',
 '76561198012349211',
 '76561198048174446',
 '76561198000351712',
 '76561198006990323',
 '76561197984545631',
 '76561197980182966',
 '76561198026786565',
 '76561198033146436',
 '76561198027990253',
 '76561198029811659',
 '76561198051427992',
 '76561198000765277',
 '76561198045793655',
 '76561198044317579',
 '76561198023464573',
 '76561198042752993',
 '76561198012956878',
 '76561198050403212',
 '76561197983511315',
 '76561198024001222',
 '76561198025451013',
 '76561198014323061',
 '76561197993518055',
 '76561198052071880',
 '76561198043277459',
 '76561198012279715',
 '76561198035838575',
 '76561198004981985',
 '76561198023768912',
 '76561198049746094',
 '76561198060402775',
 '76561198100169813',
 '76561198139641211',
 '76561198198416957',
 '76561197992807666',
 '76561198084492270',
 '76561198066610203',
 '76561198002731852']

"""## Get data from API:"""

def getUserDataAndId(steamid):
  user = steam.users.get_user_details(steamid)
  steam_id = user['player']['steamid']
  return user, steam_id

def getFriendsList(df, user_id):
  row = df.shape[0] - 1
  try:
    friendsListSample = steam.users.get_user_friends_list(user_id)
    df['friendsList'][row] = friendsListSample['friends']
    return df
  except Exception as e:
    privateIdsList.append(df.index[row])
    df['friendsList'][row] = np.nan
    return df

def getRecentlyPlayedGamesData(df, user_id, row):
  recentlyPlayedGames = steam.users.get_user_recently_played_games(user_id)
  if recentlyPlayedGames['total_count'] == 0:
    df['recentlyPlayedGamesCount'][row] = 0
    df['recentlyPlayedGamesList'][row] = np.nan
    return df

  df['recentlyPlayedGamesCount'][row] = recentlyPlayedGames['total_count']
  df['recentlyPlayedGamesList'][row] = recentlyPlayedGames['games']
  return df

def getGamesData(df, user_id):
  try:
    row = df.shape[0] - 1
    owned_games = steam.users.get_owned_games(user_id)
    if len(owned_games['games']) == 0:
      df['ownedGamesCount'][row] = 0
      df['ownedGamesList'][row] = np.nan
      return df

    df['ownedGamesCount'][row] = len(owned_games['games'])
    df['ownedGamesList'][row] = owned_games['games']
    df = getRecentlyPlayedGamesData(df, user_id, row)
    return df

  except Exception as e:
    return df

def addNewRow(df, user_id):
  if user_id not in df.index.values:
    new_row = pd.DataFrame(data=user).T
    new_row.set_index('steamid', inplace=True)
    df = pd.concat([df, new_row])

    df = getFriendsList(df, user_id)
    df = getGamesData(df, user_id)

  return df

"""## Start data collection from partial dataframe:"""

url='https://drive.google.com/file/d/1-a_mkowFcMoPWk5itYQb2jNnx-0oiO9n/view?usp=drive_link'
url='https://drive.google.com/uc?id=' + url.split('/')[-2]
df = pd.read_csv(url)
df.set_index('steamid', inplace=True)
df.head()

import ast

columns_to_convert = ['friendsList', 'ownedGamesList', 'recentlyPlayedGamesList', ]
for column in columns_to_convert:
    df[column] = df[column].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else x)

str(type(df.iloc[61].friendsList)) == "<class 'list'>"

import time

num_operations = 0
num_waits = 0

# Adding Friends of Friends of root -> level 2

# Level 1 - friends of root - were users between rows 1 and 59.
# Level 2 - starts from row 60 and beyond
start = 60
end = len(df) - 1

for index in range(start, end):
  friends = df.iloc[index].friendsList

  if str(type(friends)) == "<class 'list'>":
    print('Adding friends of row', index, 'to database...')

    for i in range(len(friends)):
      user, user_id = getUserDataAndId(friends[i]['steamid'])
      num_operations += 1

      if user_id not in privateIdsList:
        df = addNewRow(df, user_id)
        num_operations += 3

      if num_operations >= 200:
        num_waits += 1
        num_operations = 0
        time.sleep(150)
        print('200 + operations made. Waiting for 2.5 minutes. This happened', num_waits, 'times.')

from google.colab import files
level_2 = df
level_2.to_csv('level_2.csv', encoding = 'utf-8-sig')
files.download('level_2.csv')
